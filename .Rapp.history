m
? addTiles
library(leaflet)#
m = leaflet() %>% addTiles()
m
m %>% setView(lng = -1.5, lat = 53.4, zoom = 10)
?leaflet
?leafletOutput
(m2 <- m %>%#
  setView(-1.5, 53.4, 10) %>% # map location#
  addMarkers(-1.4, 53.5) %>% # add a marker#
  addPopups(-1.6, 53.3, popup = "Hello Sheffield!") %>% # popup#
  # add som circles:#
  addCircles(color = "black", runif(90, -2, -1), runif(90, 53, 54), runif(90, 10, 500)))
? renderLeaflet
?leafletMap
?leafletOutput
?publish
publish
save
?save
m2
save(m2)
save(m2, "test")
save(m2, file = "test")
getwd()
? html_print
? toHTML
library(streamgraph)#
library(dplyr)#
ggplot2::movies %>%#
  select(year, Action, Animation, Comedy, Drama, Documentary, Romance, Short) %>%#
  tidyr::gather(genre, value, -year) %>%#
  group_by(year, genre) %>%#
  tally(wt=value) %>%#
  streamgraph("genre", "n", "year") %>%#
  sg_axis_x(20) %>%#
  sg_colors("PuOr") %>%#
  sg_legend(show=TRUE, label="Genres: ")
saveWidget
library(rgdal)#
library(leaflet)#
#
tmp <- tempdir()#
#
url <- "http://personal.tcu.edu/kylewalker/data/mexico.zip"#
#
file <- basename(url)#
#
download.file(url, file)#
#
unzip(file, exdir = tmp)#
#
mexico <- readOGR(dsn = tmp, layer = "mexico", encoding = "UTF-8")
library("swiTheme")#
library("swiRcharts")#
library("dplyr")#
library("rjson")#
#
#############################################################################################
###		SETTINGS	#
#############################################################################################
#
votefile <- "data/VOTEScsv_cleaned.csv"#
#
#############################################################################################
###		load initiative data	#
#############################################################################################
#
initiatives.read <- read.csv(votefile, check.names = F, stringsAsFactors = F, encoding = "latin1")#
#
# reverse order #
initiatives.read <- initiatives.read[rev(as.numeric(rownames(initiatives.read))),]#
#
# filter columns#
initiatives <- initiatives.read %>% select(`Date of Votes`, `Title in English`, `Title in German`, `Title in French`, `Title in Italien`, `Yes [%]`, `Theme codes`)#
# transform date to date#
initiatives$date <- as.Date(initiatives$`Date of Votes`)#
#
initiatives$year <- as.numeric(substr(initiatives$`Date of Votes`,1, 4))#
# add counter iniitiative per year #
initiatives <- do.call(rbind, by(initiatives, initiatives$year, function(ii) {#
	cbind(ii, n = nrow(ii):1)#
}))#
#############################################################################################
###		Plot#
#############################################################################################
#
## PLOT SETTINGS#
plot.height <- 350#
#
data <- initiatives %>% select (`Title in English`, `year`, `n`,  `Yes [%]`)#
colnames(data) <- c('name', 'y', 'x', 'value')#
#
a <- Highcharts$new()#
#
# use type='heatmap' for heat maps#
a$chart(zoomType = "x", type = 'heatmap', height = plot.height, plotBackgroundColor = "#f7f5ed", inverted = TRUE)#
a$series( data = rCharts::toJSONArray2(data, json = F, names = T))#
#
a$addParams(colorAxis =#
  list(min = 0, max = 100, stops = list(#
	  list(0, '#ab3d3f'),#
      list(0.499, '#EED8D9'),	  #
      list(0.5, '#999966'),#
      list(1, '#336666') #
  ))#
)#
#
# a$legend(align='right',#
#          layout='vertical',#
#          margin=0,#
#          verticalAlign='top',#
#          y=25,#
#          symbolHeight=plot.height)#
a$yAxis(max = max(data$y), ceiling = max(data$y), maxPadding = 0, tickAmount = 2, gridLineWidth =  0, minorGridLineWidth = 0, title = list(text = ""))#
#
a$xAxis(lineWidth = 0, minorGridLineWidth = 0, lineColor = 'transparent', labels = list(enabled = FALSE), #
	minorTickLength = 0, tickLength =  0)  	#
a$tooltip(formatter = "#! function() { return 'In <b>' + this.point.y + ',</b> the initative:<br><i>' + this.point.name +#
                    '</i><br>recolted <b>' + this.point.value + '%</b> of yes'; } !#")	 #
a$legend(enabled = F)#
a$addAssets(js =#
   c(#"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js",#
     # "https://code.highcharts.com/highcharts.js",#
     # "https://code.highcharts.com/highcharts-more.js",#
     "https://code.highcharts.com/modules/exporting.js",#
     "https://code.highcharts.com/modules/heatmap.js"#
     )#
)#
a#
#
a$save(destfile = 'initiative.html')#
#
hChart2responsiveHTML("initiative.html", output.html = "initiative_heatmap.html", h2 = "Toutes les initiatives populaires suisses", descr = "",#
	source = "", h3 = "", author = "Duc-Quang Nguyen | swissinfo.ch")
library(swiRchart)
library(swiRcharts)
?hSeries
ibrary(swiTheme)#
a <- rCharts::Highcharts$new()#
x <- 1:10#
y <- seq(1, 100, 10)#
z <- 10:1#
color <- rep(c("grey", "red"), 5)#
name <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")#
series <- c(rep(c("blob", "poop", "doop"), 3), "asdf")#
a$series(hSeries(x,y,z,name, color, series))#
#
# tweak the bubble plot#
a$chart(zoomType = "xy", type = "bubble")#
a$plotOptions(bubble = list(dataLabels = list(enabled = T, style = list(textShadow = 'none') ,#
color = '#aa8959', formatter = "#! function() { return this.point.name; } !#")))#
#
a$colors(swi_rpal)#
a$tooltip(formatter = "#! function() { return this.point.name + ':' +this.x + ', ' + this.y; } !#")#
a$xAxis(title = list(text = "important indicator", align = "high"), lineColor = list ('#FF0000'))#
a#
#
hChart.html <- tempfile("hchart_labelledBubble.html")#
a$save(hChart.html)
library(swiRchart)
library(swiRcharts)
?hSeries
library(swiTheme)#
a <- rCharts::Highcharts$new()#
x <- 1:10#
y <- seq(1, 100, 10)#
z <- 10:1#
color <- rep(c("grey", "red"), 5)#
name <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")#
series <- c(rep(c("blob", "poop", "doop"), 3), "asdf")#
a$series(hSeries(x,y,z,name, color, series))
a$chart(zoomType = "xy", type = "bubble")#
a$plotOptions(bubble = list(dataLabels = list(enabled = T, style = list(textShadow = 'none') ,#
color = '#aa8959', formatter = "#! function() { return this.point.name; } !#")))#
#
a$colors(swi_rpal)#
a$tooltip(formatter = "#! function() { return this.point.name + ':' +this.x + ', ' + this.y; } !#")#
a$xAxis(title = list(text = "important indicator", align = "high"), lineColor = list ('#FF0000'))#
a#
#
hChart.html <- tempfile("hchart_labelledBubble.html")#
a$save(hChart.html)
hChart2responsiveHTML
library(swiRcharts)
?hSeries
library(swiTheme)#
a <- rCharts::Highcharts$new()#
x <- 1:10#
y <- seq(1, 100, 10)#
z <- 10:1#
color <- rep(c("grey", "red"), 5)#
name <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")#
series <- c(rep(c("blob", "poop", "doop"), 3), "asdf")#
a$series(hSeries(x,y,z,name, color, series))
hSeries2 <- hSeries2(data.frame(x = x, y = y, z = z, color = color, name = name, series = series), "series")#
 b <- rCharts::Highcharts$new()#
b$series(hSeries2)
b
install.packages("readr")
install.package("devtools")
install.packages("devtools")
install.packages("rCharts")
install.packages("devtools")#
require(devtools)#
install_github('rCharts', 'ramnathv')#
library(rCharts)
install_github(ramnathv/rCharts)
1:2
rev(1:2)
library(rCharts)
set.seed(123134)#
y <- rnorm(20, 35, 4)#
y[7] <- NA#
y[13] <- NA#
y <- rbind(t(t(y)), t(t(rep(NA, 10))))#
fc <- rnorm(10, 35, 1)#
fc <- rbind(t(t(rep(NA,20))), t(t(fc)))#
uci <- rnorm(10, 38, 1)#
uci <- rbind(t(t(rep(NA,20))), t(t(uci)))#
lci <- rnorm(10, 32, 1)#
lci <- rbind(t(t(rep(NA,20))), t(t(lci)))#
plotData <- data.frame(y,fc,uci,lci)#
#
h1 <- Highcharts$new()#
h1$chart(type="line")#
h1$series(data=plotData$y, marker = list(symbol = 'circle'), connectNulls = TRUE)#
h1$series(data=plotData$fc, marker = list(symbol = 'circle'), connectNulls = TRUE)#
h1$series(data=plotData$uci, showInLegend = FALSE, marker = list(symbol = 'square'), connectNulls = TRUE)#
h1$series(data=plotData$lci, showInLegend = FALSE, marker = list(symbol = 'square'), connectNulls = TRUE)#
h1$series(data=rep(30,30), marker= list(enabled = FALSE))#
h1
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
###### This download the yearly data with country of origin!#
library(eurostat)#
library(WDI)#
#
library(dplyr)#
library(ggplot2)#
library(swiTheme)#
#############################################################################################
###		Get asylum data#
#############################################################################################
# Asylum and first time asylum applicants by citizenship, age and sex Annual aggregated data (rounded) [migr_asyappctza]#
# First instance decisions on applications by citizenship, age and sex Annual aggregated data (rounded) [migr_asydcfsta]#
#
id <- c('migr_asyappctza', 'migr_asydcfsta' )#
#
getYearlyData <- function(id) {#
	dat <- get_eurostat(id, time_format = "raw", cache = F )#
	datl <- label_eurostat(dat)#
	# add iso2 code#
	datl$iso2 <- dat$geo#
#
	# transform dates efficiently!#
	datl$time <- as.numeric(as.character(datl$time))#
	datl#
}#
#
dat.asap <- getYearlyData(id[1])#
dat.asap <- filter(dat.asap, time == max(dat.asap$time), sex == "Total", age == "Total", asyl_app == 'Asylum applicant')#
dat.asap <- filter(dat.asap, citizen == "Total", geo != "Total", iso2 != 'EU28') %>% select(one_of(c('geo', 'values', 'iso2')))#
dat.asde <- getYearlyData(id[2])#
dat.asde <- dat.asde %>%  filter(time == max(dat.asde$time), sex == "Total", age == "Total", decision == "Total positive decisions")#
dat.asde <- filter(dat.asde, citizen == "Total", geo != "Total", iso2 != 'EU28')  %>% select(one_of(c('geo', 'values', 'iso2')))#
#
#############################################################################################
###		Get Eurostat population data#
#############################################################################################
#
dat <- get_eurostat('tps00001')#
datl <- label_eurostat(dat)#
datl$iso2 <- dat$geo#
max(datl$time)#
#
pop <- datl %>% filter(time == max(datl$time), iso2 %in% as.character(unique(dat.asap$iso2))) %>% #
	select(one_of(c('geo','values', 'iso2')))#
#
#############################################################################################
###		Get World Bank data#
#############################################################################################
#
isoES2WB <- structure(as.character(unique(dat.asap$iso2)), names = as.character(unique(dat.asap$iso2)))#
# EL and UK are not used by the WB!#
isoES2WB[which(isoES2WB == 'EL')] <- 'GR'#
isoES2WB[which(isoES2WB == 'UK')] <- 'GB'#
#
# GDP per capita, PPP (current international $) http://data.worldbank.org/indicator/NY.GDP.PCAP.PP.CD#
# Unemployment, total (% of total labor force) (modeled ILO estimate) http://data.worldbank.org/indicator/SL.UEM.TOTL.ZS#
#
idw <- c('NY.GDP.PCAP.PP.CD', 'SL.UEM.TOTL.ZS')#
#
getwbData <- function (ind, countries = isoES2WB) {#
	indicator <- WDI(indicator = ind, country = countries, start = 2013, end = 2015)	#
	do.call(rbind, by(indicator, indicator$iso2c, function(ii) {#
		rowx <- !is.na(ii[,3])		#
		if(all(!rowx)) {#
			ii[1,]#
		} else if (all(rowx)){#
			ii[which.max(ii$year),]#
		} else {#
			ii[which(rowx),]#
		} #
	}))#
} #
#
gdp <- getwbData(idw[1], isoES2WB)#
une <- getwbData(idw[2], isoES2WB)#
#############################################################################################
###		Combine the data#
#############################################################################################
#
# demande d'asile#
asylum.df <- dat.asap#
colnames(asylum.df)[2] <- "demandes d'asiles en 2014"
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
pop
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
semi_join(pop, asylum.df, by = "iso2")
str(pop)
str(asylum.df)
semi_join(pop, asylum.df, by = "iso2")
asylum.df
pop
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
right_join(asylum.df, pop, by = "iso2")
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
match(asylum.df$iso2, pop$iso2)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
pop[match(asylum.df$iso2, pop$iso2), 'values']
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
asylum.df <- cbind (asylum.df, population = pop[match(asylum.df$iso2, pop$iso2), 'values'])
asylum.df
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
gdp
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
getwbData <- function (ind, countries = isoES2WB) {#
	indicator <- WDI(indicator = ind, country = countries, start = 2013, end = 2015)	#
	colnames(indicator)[3] <- 'values'#
	do.call(rbind, by(indicator, indicator$iso2c, function(ii) {#
		rowx <- !is.na(ii[,3])		#
		if(all(!rowx)) {#
			ii[1,]#
		} else if (all(rowx)){#
			ii[which.max(ii$year),]#
		} else {#
			ii[which(rowx),]#
		} #
	}))#
} #
#
gdp <- getwbData(idw[1], isoES2WB)#
une <- getwbData(idw[2], isoES2WB)
gdp
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
gdp[match(asylum.df$iso2, gdp$iso2c), 'values']
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
isoES2WB
which(is.na(match(asylum.df$iso2, gdp$iso2c)))
asylum.df[which(is.na(match(asylum.df$iso2, gdp$iso2c))),]
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
match(asylum.df$iso2, isoES2WB)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
asylum.df$iso2
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
isoES2WB
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
match(asylum.df$iso2, names(isoES2WB))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
stopifnot(match(asylum.df$iso2, names(isoES2WB)) == 1:length(isoES2WB))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
gdp[match(isoES2WB, gdp$iso2c), 'values']
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
# demande d'asile#
asylum.df <- dat.asap#
colnames(asylum.df)[2] <- "demandes d'asiles en 2014"#
#
stopifnot(match(asylum.df$iso2, names(isoES2WB)) == 1:length(isoES2WB))#
#
asylum.df <- cbind (asylum.df, population = pop[match(asylum.df$iso2, pop$iso2), 'values'],#
	gdpPerCapitaPPP = gdp[match(isoES2WB, gdp$iso2c), 'values'],#
	unemployment  = une[match(isoES2WB, gdp$iso2c), 'values'],#
)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
asylum.df <- dat.asap#
colnames(asylum.df)[2] <- "demandes d'asiles en 2014"#
#
stopifnot(match(asylum.df$iso2, names(isoES2WB)) == 1:length(isoES2WB))#
#
asylum.df <- cbind (asylum.df, population = pop[match(asylum.df$iso2, pop$iso2), 'values'],#
	gdpPerCapitaPPP = gdp[match(isoES2WB, gdp$iso2c), 'values'],#
	unemployment  = une[match(isoES2WB, une$iso2c), 'values'],#
)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
gdpPerCapitaPPP = gdp[match(isoES2WB, gdp$iso2c), 'values']
gdpPerCapitaPPP
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
une[match(isoES2WB, une$iso2c), 'values']
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
# demande d'asile#
asylum.df <- dat.asap#
colnames(asylum.df)[2] <- "demandes d'asiles en 2014"#
#
stopifnot(match(asylum.df$iso2, names(isoES2WB)) == 1:length(isoES2WB))#
#
asylum.df <- cbind (asylum.df, population = pop[match(asylum.df$iso2, pop$iso2), 'values'],#
	gdpPerCapitaPPP = gdp[match(isoES2WB, gdp$iso2c), 'values'],#
	unemployment  = une[match(isoES2WB, une$iso2c), 'values']#
	)
asylum.df
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
posi.df <- dat.asde#
colnames(posi.df)[2] <- "Décisions positives en 2014"#
#
stopifnot(match(posi.df$iso2, names(isoES2WB)) == 1:length(isoES2WB))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
posi.df <- dat.asde#
colnames(posi.df)[2] <- "Décisions positives en 2014"#
#
stopifnot(match(posi.df$iso2, names(isoES2WB)) == 1:length(isoES2WB))#
#
posi.df <- cbind (posi.df, population = pop[match(posi.df$iso2, pop$iso2), 'values'],#
	gdpPerCapitaPPP = gdp[match(isoES2WB, gdp$iso2c), 'values'],#
	unemployment  = une[match(isoES2WB, une$iso2c), 'values']#
	)
posi.df
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
asylum.df$`demandes d'asiles en 2014`
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
10^6
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
asylum.df$demandeParMillion <- (asylum.df$`demandes d'asiles en 2014` / asylum.df$population) * 10^6
asylum.df$demandeParMillion
asylum.df
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
(asylum.df$`demandes d'asiles en 2014` / asylum.df$gdpPerCapitaPPP)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
(asylum.df$`demandes d'asiles en 2014` / asylum.df$gdpPerCapitaPPP) * 10^3
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
(asylum.df$`demandes d'asiles en 2014` / asylum.df$gdpPerCapitaPPP) * 10^6
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
(asylum.df$`demandes d'asiles en 2014` / asylum.df$population) * 10^3
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
(asylum.df$`demandes d'asiles en 2014` / asylum.df$unemployment)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
(asylum.df$`demandes d'asiles en 2014` * (asylum.df$unemployment* 1/100)
)
*
asylum.df$unemployment
100 - asylum.df$unemployment
100 - asylum.df$unemployment / 100
(100 - asylum.df$unemployment) / 100
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
asylum.df$demandeParUnemployment <- asylum.df$`demandes d'asiles en 2014` * ((100 - asylum.df$unemployment) / 100)
asylum.df$`demandes d'asiles en 2014` * ((100 - asylum.df$unemployment) / 100)
plot(asylum.df$`demandes d'asiles en 2014` * ((100 - asylum.df$unemployment) / 100))
plot(asylum.df$demandeParGDP)
qplot(asylum.df$demandeParGDP)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
asylum.df$demandeParGDP
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
# demande d'asile#
asylum.df <- dat.asap#
colnames(asylum.df)[2] <- "demandes d'asiles en 2014"#
#
stopifnot(match(asylum.df$iso2, names(isoES2WB)) == 1:length(isoES2WB))#
#
asylum.df <- cbind (asylum.df, population = pop[match(asylum.df$iso2, pop$iso2), 'values'],#
	gdpPerCapitaPPP = gdp[match(isoES2WB, gdp$iso2c), 'values'],#
	unemployment  = une[match(isoES2WB, une$iso2c), 'values']#
	)#
#
asylum.df$demandeParMillion <- (asylum.df$`demandes d'asiles en 2014` / asylum.df$population) * 10^6#
asylum.df$demandeParGDP <- (asylum.df$`demandes d'asiles en 2014` / asylum.df$gdpPerCapitaPPP) * 10^3#
asylum.df$demandeParUnemployment <- asylum.df$`demandes d'asiles en 2014` * ((100 - asylum.df$unemployment) / 100)
plot(asylum.df$demandeParGDP)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
asylum.df <- dat.asap#
colnames(asylum.df)[2] <- "demandes d'asiles en 2014"#
#
stopifnot(match(asylum.df$iso2, names(isoES2WB)) == 1:length(isoES2WB))#
#
asylum.df <- cbind (asylum.df, population = pop[match(asylum.df$iso2, pop$iso2), 'values'],#
	gdpPerCapitaPPP = gdp[match(isoES2WB, gdp$iso2c), 'values'],#
	unemployment  = une[match(isoES2WB, une$iso2c), 'values']#
	)#
#
asylum.df$demandeParMillion <- (asylum.df$`demandes d'asiles en 2014` / asylum.df$population) * 10^6#
asylum.df$demandeParGDP <- (asylum.df$`demandes d'asiles en 2014` / asylum.df$gdpPerCapitaPPP) * 10^3#
asylum.df$demandeParUnemployment <- asylum.df$`demandes d'asiles en 2014` * ((100 - asylum.df$unemployment) / 100)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
asylum.df
100 -7.5
31945 * 0.925
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
asylum.df %>% select(geo,`demandes d'asiles en 2014`, 'demandeParMillion', 'demandeParGDP', 'demandeParUnemployment')
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
asylum.df %>% select(one_of(c(geo,`demandes d'asiles en 2014`, 'demandeParMillion', 'demandeParGDP', 'demandeParUnemployment'))
)
asylum.df %>% select(one_of(c('geo',`demandes d'asiles en 2014`, 'demandeParMillion', 'demandeParGDP', 'demandeParUnemployment'))
)
asylum.df %>% select(one_of(c('geo','demandes d'asiles en 2014', 'demandeParMillion', 'demandeParGDP', 'demandeParUnemployment'))
asylum.df %>% select(one_of(c('geo',"demandes d'asiles en 2014", 'demandeParMillion', 'demandeParGDP', 'demandeParUnemployment'))
)
asylum.df %>% select(one_of(c('geo',"demandes d'asiles en 2014", 'demandeParMillion', 'demandeParGDP', 'demandeParUnemployment')))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
asylum.df %>% select(one_of(c("geo", "demandes d'asiles en 2014", 'demandeParUnemployment', 'demandeParMillion', 'demandeParGDP')))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
(asylum.df$`demandes d'asiles en 2014` * asylum.df$unemployment) / 100)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
asylum.df$`demandes d'asiles en 2014` * asylum.df$unemployment
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
(asylum.df$`demandes d'asiles en 2014` * asylum.df$unemployment)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
(asylum.df$`demandes d'asiles en 2014` / asylum.df$unemployment)
plot((asylum.df$`demandes d'asiles en 2014` / asylum.df$unemployment))
plot((asylum.df$`demandes d'asiles en 2014` / asylum.df$unemployment)* 100)
plot((asylum.df$`demandes d'asiles en 2014` / asylum.df$unemployment))
asylum.df$`demandes d'asiles en 2014` /asylum.df$unemployment
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
asylum.df <- dat.asap#
colnames(asylum.df)[2] <- "demandes d'asiles en 2014"#
#
stopifnot(match(asylum.df$iso2, names(isoES2WB)) == 1:length(isoES2WB))#
#
asylum.df <- cbind (asylum.df, population = pop[match(asylum.df$iso2, pop$iso2), 'values'],#
	gdpPerCapitaPPP = gdp[match(isoES2WB, gdp$iso2c), 'values'],#
	unemployment  = une[match(isoES2WB, une$iso2c), 'values']#
	)#
#
asylum.df$demandeParMillion <- (asylum.df$`demandes d'asiles en 2014` / asylum.df$population) * 10^6#
asylum.df$demandeParGDP <- (asylum.df$`demandes d'asiles en 2014` / asylum.df$gdpPerCapitaPPP) * 10^3#
asylum.df$demandeParUnemployment <- (asylum.df$`demandes d'asiles en 2014` / asylum.df$unemployment) / 100)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
asylum.df <- dat.asap#
colnames(asylum.df)[2] <- "demandes d'asiles en 2014"#
#
stopifnot(match(asylum.df$iso2, names(isoES2WB)) == 1:length(isoES2WB))#
#
asylum.df <- cbind (asylum.df, population = pop[match(asylum.df$iso2, pop$iso2), 'values'],#
	gdpPerCapitaPPP = gdp[match(isoES2WB, gdp$iso2c), 'values'],#
	unemployment  = une[match(isoES2WB, une$iso2c), 'values']#
	)
asylum.df
28065 / 4.9
23770 / 4.4
445 / 16.5
5615 / 26.6
5615 / 5
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
# demande d'asile#
asylum.df <- dat.asap#
colnames(asylum.df)[2] <- "demandes d'asiles en 2014"#
#
stopifnot(match(asylum.df$iso2, names(isoES2WB)) == 1:length(isoES2WB))#
#
asylum.df <- cbind (asylum.df, population = pop[match(asylum.df$iso2, pop$iso2), 'values'],#
	gdpPerCapitaPPP = gdp[match(isoES2WB, gdp$iso2c), 'values'],#
	unemployment  = une[match(isoES2WB, une$iso2c), 'values']#
	)#
#
asylum.df$demandeParMillion <- (asylum.df$`demandes d'asiles en 2014` / asylum.df$population) * 10^6#
asylum.df$demandeParGDP <- (asylum.df$`demandes d'asiles en 2014` / asylum.df$gdpPerCapitaPPP) * 10^3#
asylum.df$demandeParUnemployment <- round(asylum.df$`demandes d'asiles en 2014` / asylum.df$unemployment) #
#
asylum.df %>% select(one_of(c("geo", "demandes d'asiles en 2014", 'demandeParUnemployment', 'demandeParMillion', 'demandeParGDP')))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
posi.df <- dat.asde#
colnames(posi.df)[2] <- "Décisions positives en 2014"#
stopifnot(match(posi.df$iso2, names(isoES2WB)) == 1:length(isoES2WB))#
posi.df <- cbind (posi.df, population = pop[match(posi.df$iso2, pop$iso2), 'values'],#
	gdpPerCapitaPPP = gdp[match(isoES2WB, gdp$iso2c), 'values'],#
	unemployment  = une[match(isoES2WB, une$iso2c), 'values']#
	)#
posi.df$demandeParMillion <- (posi.df$`Décisions positives en 2014` / posi.df$population) * 10^6#
posi.df$demandeParGDP <- (posi.df$`Décisions positives en 2014` / posi.df$gdpPerCapitaPPP) * 10^3#
posi.df$demandeParUnemployment <- round(posi.df$`Décisions positives en 2014` / posi.df$unemployment)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
osi.df %>% select(one_of(c("geo", "demandes d'asiles en 2014", 'demandeParMillion', 'demandeParGDP', 'demandeParUnemployment',)))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
posi.df %>% select(one_of(c("geo", "demandes d'asiles en 2014", 'demandeParMillion', 'demandeParGDP', 'demandeParUnemployment',)))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
posi.df %>% select(one_of(c("geo", "Décisions positives en 2014", 'demandeParMillion', 'demandeParGDP', 'demandeParUnemployment',)))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
posi.df %>% select(one_of(c("geo", "Décisions positives en 2014", 'demandeParMillion', 'demandeParGDP', 'demandeParUnemployment')))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
posi.df <- dat.asde#
colnames(posi.df)[2] <- "Décisions positives en 2014"#
stopifnot(match(posi.df$iso2, names(isoES2WB)) == 1:length(isoES2WB))#
posi.df <- cbind (posi.df, population = pop[match(posi.df$iso2, pop$iso2), 'values'],#
	gdpPerCapitaPPP = gdp[match(isoES2WB, gdp$iso2c), 'values'],#
	unemployment  = une[match(isoES2WB, une$iso2c), 'values']#
	)#
posi.df$demandeParMillion <- round((posi.df$`Décisions positives en 2014` / posi.df$population) * 10^6)#
posi.df$demandeParGDP <- (posi.df$`Décisions positives en 2014` / posi.df$gdpPerCapitaPPP) * 10^3#
posi.df$demandeParUnemployment <- round(posi.df$`Décisions positives en 2014` / posi.df$unemployment) #
#
posi.df %>% select(one_of(c("geo", "Décisions positives en 2014", 'demandeParMillion', 'demandeParGDP', 'demandeParUnemployment')))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
asylum.df %>% select(one_of(c("geo", "demandes d'asiles en 2014", 'demandeParMillion', 'demandeParGDP', 'demandeParUnemployment')))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
posi.df <- dat.asde#
colnames(posi.df)[2] <- "Décisions positives en 2014"#
stopifnot(match(posi.df$iso2, names(isoES2WB)) == 1:length(isoES2WB))#
posi.df <- cbind (posi.df, population = pop[match(posi.df$iso2, pop$iso2), 'values'],#
	gdpPerCapitaPPP = gdp[match(isoES2WB, gdp$iso2c), 'values'],#
	unemployment  = une[match(isoES2WB, une$iso2c), 'values']#
	)#
posi.df$demandeParMillion <- round((posi.df$`Décisions positives en 2014` / posi.df$population) * 10^6)#
posi.df$demandeParGDP <- round((posi.df$`Décisions positives en 2014` / posi.df$gdpPerCapitaPPP) * 10^3)#
posi.df$demandeParUnemployment <- round(posi.df$`Décisions positives en 2014` / posi.df$unemployment) #
#
posi.df %>% select(one_of(c("geo", "Décisions positives en 2014", 'demandeParMillion', 'demandeParGDP', 'demandeParUnemployment')))
?write.csv
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
write.csv(#
	asylum.df %>% select(one_of(c("geo", "demandes d'asiles en 2014", #
	'demandeParMillion', 'demandeParGDP', 'demandeParUnemployment'))), file = "prod/04a_asylumSeekerByIndicator.csv", row.names = F)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
# demande d'asile#
asylum.df <- dat.asap#
colnames(asylum.df)[2] <- "demandes d'asiles en 2014"#
#
stopifnot(match(asylum.df$iso2, names(isoES2WB)) == 1:length(isoES2WB))#
#
asylum.df <- cbind (asylum.df, population = pop[match(asylum.df$iso2, pop$iso2), 'values'],#
	gdpPerCapitaPPP = gdp[match(isoES2WB, gdp$iso2c), 'values'],#
	unemployment  = une[match(isoES2WB, une$iso2c), 'values']#
	)#
#
asylum.df$demandeParMillion <- round((asylum.df$`demandes d'asiles en 2014` / asylum.df$population) * 10^6)#
asylum.df$demandeParGDP <- round((asylum.df$`demandes d'asiles en 2014` / asylum.df$gdpPerCapitaPPP) * 10^3)#
asylum.df$demandeParUnemployment <- round(asylum.df$`demandes d'asiles en 2014` / asylum.df$unemployment) #
#
write.csv(#
	asylum.df %>% select(one_of(c("geo", "demandes d'asiles en 2014", #
	'demandeParMillion', 'demandeParGDP', 'demandeParUnemployment'))), file = "prod/04a_asylumSeekerByIndicator.csv", row.names = F)#
posi.df <- dat.asde#
colnames(posi.df)[2] <- "Décisions positives en 2014"#
stopifnot(match(posi.df$iso2, names(isoES2WB)) == 1:length(isoES2WB))#
posi.df <- cbind (posi.df, population = pop[match(posi.df$iso2, pop$iso2), 'values'],#
	gdpPerCapitaPPP = gdp[match(isoES2WB, gdp$iso2c), 'values'],#
	unemployment  = une[match(isoES2WB, une$iso2c), 'values']#
	)#
posi.df$demandeParMillion <- round((posi.df$`Décisions positives en 2014` / posi.df$population) * 10^6)#
posi.df$demandeParGDP <- round((posi.df$`Décisions positives en 2014` / posi.df$gdpPerCapitaPPP) * 10^3)#
posi.df$demandeParUnemployment <- round(posi.df$`Décisions positives en 2014` / posi.df$unemployment) #
#
write.csv(posi.df %>% select(one_of(c("geo", "Décisions positives en 2014", #
	'demandeParMillion', 'demandeParGDP', 'demandeParUnemployment'))), file = "prod/04b_positiveDecByIndicator.csv", row.names = F)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
###### This download the yearly data with country of origin!#
library(eurostat)#
library(WDI)#
#
library(dplyr)#
library(ggplot2)#
library(swiTheme)#
#############################################################################################
###		Get asylum data#
#############################################################################################
# Asylum and first time asylum applicants by citizenship, age and sex Annual aggregated data (rounded) [migr_asyappctza]#
# First instance decisions on applications by citizenship, age and sex Annual aggregated data (rounded) [migr_asydcfsta]#
#
id <- c('migr_asyappctza', 'migr_asydcfsta' )#
#
getYearlyData <- function(id) {#
	dat <- get_eurostat(id, time_format = "raw", cache = F )#
	datl <- label_eurostat(dat)#
	# add iso2 code#
	datl$iso2 <- dat$geo#
#
	# transform dates efficiently!#
	datl$time <- as.numeric(as.character(datl$time))#
	datl#
}#
#
dat.asap <- getYearlyData(id[1])#
dat.asap <- filter(dat.asap, time == max(dat.asap$time), sex == "Total", age == "Total", asyl_app == 'Asylum applicant')#
dat.asap <- filter(dat.asap, citizen == "Total", geo != "Total", iso2 != 'EU28') %>% select(one_of(c('geo', 'values', 'iso2')))#
dat.asde <- getYearlyData(id[2])#
dat.asde <- dat.asde %>%  filter(time == max(dat.asde$time), sex == "Total", age == "Total", decision == "Total positive decisions")#
dat.asde <- filter(dat.asde, citizen == "Total", geo != "Total", iso2 != 'EU28')  %>% select(one_of(c('geo', 'values', 'iso2')))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
id <- c('migr_asydcfsta' )#
#
getYearlyData <- function(id) {#
	dat <- get_eurostat(id, time_format = "raw", cache = F )#
	datl <- label_eurostat(dat)#
	# add iso2 code#
	datl$iso2 <- dat$geo#
#
	# transform dates efficiently!#
	datl$time <- as.numeric(as.character(datl$time))#
	datl#
}#
#
dat.asde <- getYearlyData(id[2])
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
id <- c('migr_asydcfsta')#
#
getYearlyData <- function(id) {#
	dat <- get_eurostat(id, time_format = "raw", cache = F )#
	datl <- label_eurostat(dat)#
	# add iso2 code#
	datl$iso2 <- dat$geo#
#
	# transform dates efficiently!#
	datl$time <- as.numeric(as.character(datl$time))#
	datl#
}#
#
dat.asde <- getYearlyData(id)
str(dat.asde)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
dat.asde <- dat.asde %>%  filter(time == max(dat.asde$time), sex == "Total", age == "Total")
str(dat.asde)
dat.asde %>% filter(geo == 'CH')
dat.asde %>% filter(iso2 == 'CH')
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
###### This download the yearly data with country of origin!#
library(eurostat)#
library(WDI)#
#
library(dplyr)#
library(ggplot2)#
library(swiTheme)#
#############################################################################################
###		Get asylum data#
#############################################################################################
# Asylum and first time asylum applicants by citizenship, age and sex Annual aggregated data (rounded) [migr_asyappctza]#
# First instance decisions on applications by citizenship, age and sex Annual aggregated data (rounded) [migr_asydcfsta]#
#
id <- c('migr_asydcfsta')#
#
getYearlyData <- function(id) {#
	dat <- get_eurostat(id, time_format = "raw", cache = F )#
	datl <- label_eurostat(dat)#
	# add iso2 code#
	datl$iso2 <- dat$geo#
#
	# transform dates efficiently!#
	datl$time <- as.numeric(as.character(datl$time))#
	datl#
}#
#
dat.asde <- getYearlyData(id)#
dat.asde <- dat.asde %>%  filter(time == max(dat.asde$time), sex == "Total", age == "Total")
unique(dat.asde$iso2)
dat.asde %>% filter(iso2 == 'CH')
dat.asde %>% filter(iso2 == 'CH', values > 0)
dat.asde %>% filter(iso2 == 'CH', values > 0)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
dat.asde <- filter(dat.asde, !citizen %in% citizenAgg, iso2 %in% iso2.subset)  %>% #
	select(one_of(c('citizen', 'decision', 'geo', 'values', 'iso2')))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
citizenAgg <- c("Total", "European Union (28 countries)", "Extra EU-28")
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
dat.asde <- filter(dat.asde, !citizen %in% citizenAgg, iso2 %in% iso2.subset)  %>% #
	select(one_of(c('citizen', 'decision', 'geo', 'values', 'iso2')))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
iso2.subset <- ('CH', 'DE', 'UK', 'FR', 'IT', 'SP', 'SE', 'PT')
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_24_euroAsylum')
iso2.subset <- c('CH', 'DE', 'UK', 'FR', 'IT', 'SP', 'SE', 'PT')#
#
dat.asde <- filter(dat.asde, !citizen %in% citizenAgg, iso2 %in% iso2.subset)  %>% #
	select(one_of(c('citizen', 'decision', 'geo', 'values', 'iso2')))
dat.asde
dat.asde %>% filter(iso2 == 'CH')
test<- dat.asde %>% filter(iso2 == 'CH')
tes
dat.asde %>% filter(iso2 == 'CH', decision = "Total")
dat.asde %>% filter(iso2 == 'CH', decision == "Total")
dat.asde %>% filter(iso2 == 'CH', decision == "Total")$Total
dat.asde %>% filter(iso2 == 'CH', decision == "Total")
test<- dat.asde %>% filter(iso2 == 'CH', decision == "Total")
sum(test$values)
